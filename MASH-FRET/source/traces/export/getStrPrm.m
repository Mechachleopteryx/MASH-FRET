function str_prm = getStrPrm(s, m, h_fig)
%% General

% excitation wavelength
exc = s.excitations;
nExc = numel(exc);
str_wl = [];
for i = 1:nExc
    str_wl = strcat(str_wl, '%4.2f nm\t');
end
str_wl = strcat(str_wl, '\n');
str_wl = sprintf(str_wl, exc);

% channel excitations
nChan = s.nb_channel;
chanExc = s.chanExc;
labels = s.labels;
str_chanExc = '';
for c = 1:nChan
    str_chanExc = strcat(str_chanExc, '\t', labels{c}, '(channel ', ...
        num2str(c), ') at ', num2str(chanExc(c)), 'nm\n');
end

% experimental parameters
str_exp_prm = [];
for i = 1:size(s.exp_parameters,1)
    prm_add = [];
    if ~isempty(s.exp_parameters{i,2})
        prm = strrep(s.exp_parameters{i,1}, '%', '%%');
        prm_add = strcat(prm_add, '\t', prm, ':');
        if isnumeric(s.exp_parameters{i,2})
            prm = num2str(s.exp_parameters{i,2});
        else
            prm = s.exp_parameters{i,2};
        end
        prm_add = strcat(prm_add, prm);
        if ~isempty(s.exp_parameters{i,3})
            prm = strrep(s.exp_parameters{i,3}, '%', '%%');
            prm_add = strcat(prm_add, prm);
        end
        str_exp_prm = strcat(str_exp_prm, prm_add, '\n');
    end
end

% coordinates
if ~isempty(s.coord)
    str_coord = '';
    for c = 1:nChan
        str_coord = strcat(str_coord, '\t%4.2f,%4.2f');
    end
    str_coord = sprintf(str_coord, s.coord(m,:));
else
    str_coord = 'No coordinate available.';
end

% intensity units
perSec = s.fix{2}(4);
perPix = s.fix{2}(5);
str_units = 'counts';
if perSec
    str_units = strcat(str_units, ' per second');
end
if perPix
    str_units = strcat(str_units, ' per pixel');
end
str_units = sprintf('%s\n', str_units);

% FRET
FRET = s.FRET; nFRET = size(FRET,1);
if nFRET > 0
    str_fret = '';
    for i = 1:nFRET
        str_fret = sprintf( ...
            '%s\tfrom %s to %s\n', str_fret, labels{FRET(i,1)}, ...
            labels{FRET(i,2)});
    end
else
    str_fret = 'none\n';
end

% stoichiometry
S = s.S; nS = size(S,1);
if nS > 0
    str_s = '';
    for i = 1:nS
        str_s = sprintf('%s\tof %s fluorescence\n', str_s, labels{S(i)});
    end
else
    str_s = 'none\n';
end

%% background corrections
rate = s.frame_rate;
nPix = s.pix_intgr(2);
prm_bg = s.prm{m}{3};
str_bg = '';
h = guidata(h_fig);
str_meth = get(h.popupmenu_trBgCorr, 'String');
for l = 1:nExc
    for c = 1:nChan
        str_bg = sprintf('%s\tchan. %i upon %d nm excitation:', ...
            str_bg, c, exc(l));
        if ~prm_bg{1}(l,c)
            str_bg = sprintf('%s none\n', str_bg);
        else
            str_bg = sprintf('%s method %s', str_bg, ...
                str_meth{prm_bg{2}(l,c)});
            
            if perSec
                prm_bg{3}{l,c}(prm_bg{2}(l,c),3) = ...
                    prm_bg{3}{l,c}(prm_bg{2}(l,c),3)/rate;
            end
            if perPix
                prm_bg{3}{l,c}(prm_bg{2}(l,c),3) = ...
                    prm_bg{3}{l,c}(prm_bg{2}(l,c),3)/nPix;
            end
            
            switch prm_bg{2}(l,c)
                case 1 % manual
                    str_bg = sprintf('%s, BG intensity %d\n', str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3));
                    
                case 2 % darkest
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', sub-image window size (pix) %i\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2));
                    
                case 3 % mean
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', tolerance cutoff %d\n', ...
                        ', sub-image window size (pix) %i\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),1), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2));
                    
                case 4 % most frequent
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', number of histogram bin %i', ...
                        ', sub-image window size (pix) %i\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),1), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2));
                    
                case 5 % histothresh
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', cumulative probability threshold %d', ...
                        ', sub-image window size (pix) %i\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),1), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2));
                    
                case 6 % dark trace
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', running average window size %i', ...
                        ', sub-image window size (pix) %i', ...
                        ', dark coordinates (%i,%i)\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),1), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),4), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),5));
                    
                case 7 % median
                    str_bg = sprintf(strcat('%s, BG intensity %d', ...
                        ', calculation method %d\n', ...
                        ', sub-image window size (pix) %i\n'), str_bg, ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),3), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),1), ...
                        prm_bg{3}{l,c}(prm_bg{2}(l,c),2));
            end
        end
    end
end

%% factor corrections
str_fact = '';
prm_corr = s.prm{m}{5};
for l = 1:nExc
    for c = 1:nChan
        str_fact = sprintf('%s\tchan. %i upon %d nm excitation: ', ...
            str_fact, c, exc(l));
        for c_i = 1:nChan
            if c_i ~= c
                if c_i < c
                    n = c_i;
                else
                    n = c_i-1;
                end
                str_fact = sprintf('%s %d bleethrough in chan. %i,', ...
                    str_fact, prm_corr{1}{l,c}(n), c_i);
            end
        end
        for l_i = 1:nExc
            if l_i ~= l
                if l_i < l
                    n = l_i;
                else
                    n = l_i-1;
                end
                str_fact = sprintf(strcat('%s direct excitation >> %d of ', ...
                    'signal at %4.2f nm,'), str_fact, ...
                    prm_corr{2}{l,c}(n), exc(l_i));
            end
        end
    end
end

for i = 1:nFRET
    str_fact = sprintf(strcat('%s %d  quantum yield & filter ', ...
            'absorption\n'), str_fact, prm_corr{3}(i));
end

%% denoising
prm_den = s.prm{m}{1};
str_meth = get(h.popupmenu_denoising, 'String');
if prm_den{1}(2)
    str_den = sprintf('method %s', str_meth{prm_den{1}(1)});
    switch prm_den{1}(1)
        case 1 % sliding averaging
            str_den = sprintf('%s, running average window size %i\n', ...
                str_den, prm_den{2}(prm_den{1}(1),1));
        case 2 % Haran filter
            str_den = sprintf(strcat( ...
                '%s, exponent of predictor weight %d', ...
                ', running average window (RAW) size %i', ...
                ', factor (predictor RAW sizes) %i\n'), str_den, ...
                prm_den{2}(prm_den{1}(1),1), ...
                prm_den{2}(prm_den{1}(1),2), ...
                prm_den{2}(prm_den{1}(1),3));
        case 3 % Wavelet analysis
            switch prm_den{2}(prm_den{1}(1),1)
                case 1
                    str_den = sprintf('%s, firm shrink', str_den);
                case 2
                    str_den = sprintf('%s, hard shrink', str_den);
                case 3
                    str_den = sprintf('%s, soft shrink', str_den);
            end
            switch prm_den{2}(prm_den{1}(1),2)
                case 1
                    str_den = sprintf('%s, local time', str_den);
                case 2
                    str_den = sprintf('%s, universal time', str_den);
            end
            switch prm_den{2}(prm_den{1}(1),3)
                case 1
                    str_den = sprintf('%s, cycle spin on\n', str_den);
                case 2
                    str_den = sprintf('%s, no cycle spin\n', str_den);
            end
    end
else
    str_den = 'none\n';
end

%% debleaching
inSec = s.fix{2}(7);
rate = s.frame_rate;
prm_bleach = s.prm{m}{2};
str_meth = get(h.popupmenu_debleachtype, 'String');
if prm_bleach{1}(1)
    str_bleach = sprintf('method %s', str_meth{prm_bleach{1}(1)});
    if prm_bleach{1}(1) == 2
        str_chan = get(h.popupmenu_bleachChan, 'String');
        str_bleach = sprintf(strcat('%s, apply to channel %s', ...
            ', threshold at %d, cut %i extra frames', ...
            ', min. nb of frames %i'), str_bleach, ...
            str_chan(prm_bleach{1}(3)), ...
            prm_bleach{2}(prm_bleach{1}(3),1), ...
            prm_bleach{2}(prm_bleach{1}(3),2), ...
            prm_bleach{2}(prm_bleach{1}(3),3));
    end
    if inSec
        str_bleach = sprintf('%s, cutoff time: %d\n', str_bleach, ...
            prm_bleach{1}(5)*rate);
    else
        str_bleach = sprintf('%s, cutoff frame: %d\n', str_bleach, ...
            prm_bleach{1}(5));
    end
else
    str_bleach = 'none\n';
end


%% dwell-time analysis
prm_dta = s.prm{m}{4};
str_meth = get(h.popupmenu_DTAmethod, 'String');
str_chan = getStrPop('DTA_chan', {labels FRET S exc s.colours});
str_dta = sprintf('method %s', str_meth{prm_dta{1}(1)});
if prm_dta{1}(2)
    str_dta = sprintf('%s apply to FRET & S traces\n', str_dta);
    if prm_dta{1}(1) ~= 3 % not One state
        for i = 1:(nFRET+nS)
            switch prm_dta{1}(1)
                case 1 % thresholding
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    str_dta = sprintf(strcat( ...
                        '%s max. number of states %i', ...
                        ', %i refinment cycles', ...
                        ', state binning %d, thresholds '), str_dta, ...
                        prm_dta{2}(prm_dta{1}(1),2,i), ...
                        prm_dta{2}(prm_dta{1}(1),3,i), ...
                        prm_dta{2}(prm_dta{1}(1),4,i));

                    for state = 1:prm_dta{2}(prm_dta{1}(1),2,i)
                        str_dta = sprintf('%s %d (%d,%d)', ...
                            str_dta, prm_dta{4}(1,state,i), ...
                            prm_dta{4}(2,state,i), prm_dta{4}(3,state,i));
                    end
                    str_dta = sprintf('%s\n', str_dta);

                case 2 % VbFRET
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    str_dta = sprintf(strcat( ...
                        '%s min. number of states %i', ...
                        ', max. number of states %i', ...
                        ', %i refinment cycles', ...
                        ', state binning %d', ...
                        ', max. iteration number %i\n'), str_dta, ...
                        prm_dta{2}(prm_dta{1}(1),1,i), ...
                        prm_dta{2}(prm_dta{1}(1),2,i), ...
                        prm_dta{2}(prm_dta{1}(1),3,i), ...
                        prm_dta{2}(prm_dta{1}(1),4,i), ...
                        prm_dta{2}(prm_dta{1}(1),5,i));

                case 4 % CPA
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    switch prm_dta{2}(prm_dta{1}(1),7,i)
                        case 1
                            str = '"maximum"';
                        case 2
                            str = '"MSE"';
                    end
                    str_dta = sprintf(strcat('%s %i refinment cycles', ...
                        ', state binning  %d', ...
                        ', %i bootstrap samples', ...
                        ', %d significance level', ...
                        ', identify changes by %s\n'), str_dta, ...
                        prm_dta{2}(prm_dta{1}(1),3,i), ...
                        prm_dta{2}(prm_dta{1}(1),4,i), ...
                        prm_dta{2}(prm_dta{1}(1),5,i), ...
                        prm_dta{2}(prm_dta{1}(1),6,i)/100, str);
                    
                case 5 % STaSI
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    str_dta = sprintf(strcat(...
                        '%s max. number of states %i', ...
                        '%i refinment cycles', ...
                        ', state binning  %d\n'), str_dta, ...
                        prm_dta{2}(prm_dta{1}(1),2,i), ...
                        prm_dta{2}(prm_dta{1}(1),3,i), ...
                        prm_dta{2}(prm_dta{1}(1),4,i));
            end
        end
    end
else
    str_dta = sprintf('%s apply to intensity traces\n', str_dta);
    if prm_dta{1}(1) ~= 3 % not One state
        for i = [(nFRET+nS+1):(nChan*nExc+nFRET+nS) 1:(nFRET+nS)]
            switch prm_dta{1}(1)
                case 1 % thresholding
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    if i > nFRET+nS
                        str_dta = sprintf(strcat( ...
                            '%s max. number of states %i, ', ...
                            '%i refinment cycles', ...
                            ', state binning %d, thresholds '), ...
                            str_dta, prm_dta{2}(prm_dta{1}(1),2,i), ...
                            prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i));

                        for state = 1:prm_dta{2}(prm_dta{1}(1),2,i)
                            str_dta = sprintf('%s %d (%d,%d)', ...
                                str_dta, prm_dta{4}(1,state,i), ...
                                prm_dta{4}(2,state,i), ...
                                prm_dta{4}(3,state,i));
                        end
                        str_dta = sprintf('%s\n', str_dta);
                    else
                        str_dta = sprintf(strcat( ...
                            '%s %i refinment cycles', ...
                            ', state binning %d', ...
                            ', tolerance window size %i\n'), ...
                            str_dta, prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),8,i));
                    end

                case 2 % VbFRET
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    if i > nFRET+nS
                        str_dta = sprintf(strcat( ...
                            '%s min. number of states %i', ...
                            ', max. number of states %i', ...
                            ', %i refinment cycles', ...
                            ', state binning %d', ...
                            ', max. iteration number %i\n'), str_dta, ...
                            prm_dta{2}(prm_dta{1}(1),1,i), ...
                            prm_dta{2}(prm_dta{1}(1),2,i), ...
                            prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),5,i));
                    else
                        str_dta = sprintf(strcat( ...
                            '%s %i refinment cycles', ...
                            ', state binning %d', ...
                            ', tolerance window size %i\n'), ...
                            str_dta, prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),8,i));
                    end

                case 4 % CPA
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    if i > nFRET+nS
                        switch prm_dta{2}(prm_dta{1}(1),7,i)
                            case 1
                                str = '"maximum"';
                            case 2
                                str = '"MSE"';
                        end
                        str_dta = sprintf(strcat( ...
                            '%s %i refinment cycles', ...
                            ', state binning  %d', ...
                            ', %i bootstrap samples', ...
                            ', %d significance level', ...
                            ', identify changes by %s\n'), str_dta, ...
                            prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),5,i), ...
                            prm_dta{2}(prm_dta{1}(1),6,i)/100, str);
                    else
                        str_dta = sprintf(strcat( ...
                            '%s %i refinment cycles', ...
                            ', state binning %d', ...
                            ', tolerance window size %i\n'), ...
                            str_dta, prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),8,i));
                    end
                    
                case 5 % STaSI
                    str_dta = sprintf('%s\tchan. %s:', str_dta, str_chan{i});
                    if i > nFRET+nS
                        str_dta = sprintf(strcat(...
                            '%s max. number of states %i', ...
                            ', %i refinment cycles', ...
                            ', state binning  %d\n'), str_dta, ...
                            prm_dta{2}(prm_dta{1}(1),2,i), ...
                            prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i));
                    else
                        str_dta = sprintf(strcat( ...
                            '%s max. number of states %i', ...
                            ', %i refinment cycles', ...
                            ', state binning %d', ...
                            ', tolerance window size %i\n'), ...
                            str_dta, prm_dta{2}(prm_dta{1}(1),2,i), ...
                            prm_dta{2}(prm_dta{1}(1),3,i), ...
                            prm_dta{2}(prm_dta{1}(1),4,i), ...
                            prm_dta{2}(prm_dta{1}(1),8,i));
                    end
            end
        end
    end
end


%% gather all parameters
str_header = strcat('project file: %s\n', ...
    'project creation: %s\n', ...
    'last project modification: %s\n', ...
    'file creation: %s\n', ...
    'MASH-FRET version: %s\n', ... 
    'movie file: %s\n', ... 
    'coordinates file: %s\n', ...
    'number of channels: %i\n', ... 
    'excitation wavelengths: %s', ...
    'channel excitations:\n%s', ...
    'frame rate: %d s-1 \n', ... 
    'integration area: %i x %i\n', ... 
    'number of brightest pixels: %i\n', ...
    'experimental parameters: \n%s', ...
    'molecule: %i on %i (%i on %i exported)\n', ...
    'coordinates: %s\n', ...
    'intensity units: %s', ...
    'FRET: %s', ...
    'stoichiometry: %s', ...
    'background correction: \n%s', ...
    'factor corrections: \n%s', ...
    'denoising: %s', ...
    'photobleaching correction: %s', ...
    'discretisation: %s');

nMol = size(s.coord,1);
N = numel(find(s.coord_incl));
i_n = find(s.coord_incl);
n = find(i_n == m);

if ~isempty(s.movie_file)
    movie_file = strrep(s.movie_file, '\', '\\');
else
    movie_file = 'empty';
end
if ~isempty(s.coord_file)
    coord_file = strrep(s.coord_file, '\', '\\');
else
    coord_file = 'empty';
end
if ~isempty(s.proj_file)
    proj_file = strrep(s.proj_file, '\', '\\');
else
    proj_file = 'empty';
end

figname = get(h_fig, 'Name');
a = strfind(figname, 'MASH-FRET ');
b = a + numel('MASH-FRET ');
vers = figname(b:end);

str_prm = sprintf(str_header, proj_file, s.date_creation, ...
    s.date_last_modif, datestr(now), vers, movie_file, coord_file, ...
    s.nb_channel, str_wl, str_chanExc, s.frame_rate, s.pix_intgr(1), ...
    s.pix_intgr(1), s.pix_intgr(2), str_exp_prm, m, nMol, n, N, ...
    str_coord, str_units, str_fret, str_s, str_bg, str_fact, str_den, ...
    str_bleach, str_dta);

